name: CI/CD

on:
  push:
    branches:
      - main

permissions:
  contents: read
  security-events: write
  actions: read
  packages: write

jobs:
  pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.17

      - name: Install dependencies
        working-directory: api
        run: pip install -r requirements.txt

      - name: Test with pytest
        working-directory: api
        run: |
          pip install pytest pytest-cov
          pytest test_example.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

  flask-security:
    runs-on: ubuntu-latest
    needs: pytest
    steps:
      - uses: actions/checkout@master

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.10@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: ./api --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
  react-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: ./react --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
  docker:
    needs: [flask-security, react-security]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push React service
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.react
          push: true
          tags: maddmich/ccse-react:latest

      - name: Build and push Flask service
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.api
          push: true
          tags: maddmich/ccse-flask:latest
  deploy:
    needs: [docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Docker Compose to Azure Web App
        run: |
          az webapp config container set \
            --name ${{ secrets.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --multicontainer-config-type compose \
            --multicontainer-config-file docker-compose.yml
  zap_dast_test:
    needs: [deploy]
    steps:

  - name: ZAP Scan
      uses: zaproxy/action-full-scan@v0.12.0
      with:
        target: ${{ vars.AZURE_DOMAIN }}